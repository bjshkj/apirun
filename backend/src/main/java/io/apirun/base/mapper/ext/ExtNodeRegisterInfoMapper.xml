<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.apirun.base.mapper.ext.ExtNodeRegisterInfoMapper">
  <resultMap id="BaseResultMap" type="io.apirun.base.domain.NodeRegisterInfo">
    <id column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="secret_key" jdbcType="VARCHAR" property="secretKey" />
    <result column="max_load" jdbcType="INTEGER" property="maxLoad" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="node_status" jdbcType="VARCHAR" property="nodeStatus" />
    <result column="status_msg" jdbcType="VARCHAR" property="statusMsg" />
    <result column="total_tasks" jdbcType="INTEGER" property="totalTasks" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    node_id, ip, secret_key, max_load, `type`, node_status, status_msg, total_tasks,
    create_time, update_time
  </sql>
  <select id="listNodeInfo" resultType="io.apirun.base.domain.NodeRegisterInfo">
    select
    <include refid="Base_Column_List" />
    from node_register_info
  </select>


  <select id="listNodeByStatus" resultType="io.apirun.base.domain.NodeRegisterInfo">
    select
    <include refid="Base_Column_List" />
    from node_register_info
    where node_status = #{nodeStatus}
  </select>

  <select id="listNodeByStatusList" resultType="io.apirun.base.domain.NodeRegisterInfo">
    select
    <include refid="Base_Column_List" />
    from node_register_info
    where node_status in
    <foreach collection="nodeStatus" item="v" separator="," open="(" close=")">
      #{v}
    </foreach>
  </select>

  <update id="udpateNodeStatus" parameterType="io.apirun.base.domain.NodeRegisterInfo">
    update node_register_info
    set
      node_status = #{nodeStatus,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=BIGINT}
    where node_id = #{nodeId,jdbcType=VARCHAR}
  </update>
</mapper>